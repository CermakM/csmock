#!/bin/bash

# Copyright (C) 2011-2013 Red Hat, Inc.
#
# This file is part of csdiff.
#
# csdiff is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# csdiff is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with csdiff.  If not, see <http://www.gnu.org/licenses/>.

SELF="$0"
ARGS="`for i in "$@"; do printf " '%s'" "$i"; done`"

set -o pipefail

export LC_ALL=C

test -z "$TMPDIR" && TMPDIR="/tmp"

# rpm macros to use
RPMM="\
--define '_smp_mflags -kj5' \
--define '_without_testsuite 1' \
--define 'cmake cmake' \
--define 'libguestfs_runtests 0' \
--define 'runselftest 0' \
--define 'with_docs 0' \
--define 'with_publican 0' \
--without binfilter \
--without langpacks"

# PATH set for cov-build/rpmbuild
ENV_PATH="/usr/lib64/abscc:\\\$PATH"

OPTS=cd:fim::ntx

usage(){
    cat << EOF
Usage: $(basename $SELF) [-$OPTS] MOCK_PROFILE my-package.src.rpm [COV_OPTS]

  -c  Run cppcheck on the sources after the build (before running cov-analyze).

  -d  A space-separated list of manually added dependences needed for build.

  -f  Overwrite the file with results if it already exists.  By default, this
      would fail.

  -i  Keep Coverity intermediate directory for further processing.  By default,
      only build-log.txt is kept.

  -m  Commit the results to Integrity Manager and obtain the project/defect IDs.
      You can specify the target host/stream as an optional argument using the
      following format: user:passwd@host:port/stream

  -n  Do not clean mock root after the build.

  -t  Do not compress the resulting tarball.  Used to save time in case it is
      going to be extracted right away.

  -x  Skip patches not annotated by %{?_rawbuild}.  That is, do a vanilla build.

  MOCK_PROFILE  Only name of the mock profile, without the path and without
                the .cfg suffix.

  COV_OPTS      Options passed to cov-analyze.
EOF
    exit 1
}

if test "x--version" = "x$1"; then
    rpm -qf $SELF
    exit $?
fi

EC=
update_ec() {
    last_ec=$?
    test -z "$1" || last_ec="$1"
    if test 128 -le "$last_ec" -a "$last_ec" -lt 192; then
        echo "<<< $SELF: child signalled to die by $(($last_ec - 128))" >&2
        exit $last_ec
    fi

    echo "--- $SELF: exit code was: $last_ec" >&2
    test -n "$EC" || EC=$last_ec
}

die() {
    if test -n "$1"; then
        echo "$SELF: error: $1" >&2
    else
        echo "$SELF: generic error" >&2
    fi
    update_ec 2
    exit 1
}

parse_im_opts() {
    python - << EOF
import re
m = re.match('^([^@:]+):([^@]+)(?:@([^:/]+)(?::([^/]+)(?:/(.+))?)?)?\$', '$*')
print "export COV_IM_USER=%s" % m.group(1)
print "export COV_IM_PASS=%s" % m.group(2)
if m.group(3) is not None:
    print "export COV_IM_HOST=%s" % m.group(3)
if m.group(4) is not None:
    print "export COV_IM_PORT=%s" % m.group(4)
if m.group(5) is not None:
    print "export PROJ_NAME=%s" % m.group(5)
EOF
}

load_im_opts() {
    eval `parse_im_opts "$@"`
}

CPPCHECK=
CPPCHECK_FILES=

while getopts $OPTS opt; do
    case "$opt" in
        c)  CPPCHECK="/usr/bin/cppcheck"
            test -x "$CPPCHECK" || die "$CPPCHECK not found"
            TINYXML="/usr/lib64/libtinyxml.so.0"
            test -e "$TINYXML" || die "$TINYXML not found"
            CPPCHECK_FILES="$CPPCHECK $TINYXML $(readlink -f $TINYXML)"
            ;;

        d)  EXTRA_DEPS="$OPTARG"
            ;;

        f)  OVERWRITE_RESULTS=yes
            ;;

        i)
            KEEP_COV=yes
            ;;

        m)
            COMMIT_TO_IM=yes
            COMMIT_TO_IM_OPTS="$OPTARG"
            if test -n "$COMMIT_TO_IM_OPTS"; then
                parse_im_opts "$COMMIT_TO_IM_OPTS" >/dev/null 2>&1 \
                    || die "invalid argument given to -m: $COMMIT_TO_IM_OPTS"
            fi
            ;;

        n)  NO_CLEAN=yes
            ;;

        t)  TAR_ONLY=yes
            ;;

        x)
            RAWBUILD=yes
            ;;

        *)
            usage
            ;;
    esac
done
shift $(($OPTIND - 1))

# the first operand is the mock profile to use
MOCK_PROFILE="$1"
MOCK_CFG="/etc/mock/$MOCK_PROFILE.cfg"
test -f "$MOCK_CFG" || usage

# $1 ... key in .ini
write_status_and_update_ec() {
    last_ec=$?
    printf "status-$1 = %d\n" "$last_ec" >> "$INI"
    test 0 -eq "$last_ec" || update_ec "$last_ec"
}

# $1 ... key in .ini, $2 ... error mesage
write_status_and_die() {
    last_ec=$?
    printf "status-$1 = %d\n" "$last_ec" >> "$INI"
    test -n "$2" && printf "error-message = %s\n" "$2" >> "$INI"
    die "$last_ec" "$2"
}

# the second operand is the SRPM to build/analyze
SRPM="`readlink -f "$2"`"
test -n "$SRPM" || usage
test -r "$SRPM" || die "failed to open $SRPM"
rpm -pq "$SRPM" || die "failed to open an RPM package: $SRPM"
rpm -lpq "$SRPM" 2>/dev/null | grep '\.spec$' \
    || die "no specfile found in $SRPM"

BASE="`basename "$SRPM" .src.rpm`"
if test xyes = "x$TAR_ONLY"; then
    TGZ="$PWD/$BASE.tar"
else
    TGZ="$PWD/$BASE.tar.xz"
    TAR_OPTS=-J
fi

if test xyes = "x$OVERWRITE_RESULTS"; then
    rm -fv "$TGZ"
fi

test -e "$TGZ" && die "'$TGZ' already exists"

if test xyes = "x$RAWBUILD"; then
    RUN=run0
else
    RUN=run1
fi

cmd_wrap() {
    printf "\n>>> %s\t%s\n" "`date`" "$*" >&2
    "$@"
}

# prepare $TMP directory
TMP="`mktemp -d $TMPDIR/cov-mockbuild.XXXXXX`"
BASE_DIR="$TMP/$BASE/$RUN"
mkdir -p "$BASE_DIR" || die "mktemp failed"

# from now on, do the pack/cleanup on exit, no matter if we succeeded or not
trap "test -z \"\$EC\" || touch \"${BASE_DIR}.FAILED\"
    cmd_wrap tar $TAR_OPTS -cvf '$TGZ' -C '$TMP' '$BASE'
    echo --- $SELF: removing $TMP... 2>&1; rm -rf '$TMP'" EXIT

COV="$BASE_DIR/$BASE.cov"
ERR="$BASE_DIR/$BASE.err"
HTML="$BASE_DIR/$BASE.html"
INI="$BASE_DIR/$BASE.ini"
 JS="$BASE_DIR/$BASE.js"
MAP="$BASE_DIR/$BASE.map"
LOG="$BASE_DIR/$BASE.log"

cov_version() {
    cov-analyze --ident \
        | perl -i -p -e 's/\n/\\n/' \
        | perl -i -p -e 's/(\\n)*$//'
}

self_version() {
    echo $(rpm -q cov-mockbuild csdiff) 2>&1
}

# extra options for cov-analyze
shift
shift
COV_OPTS="--wait-for-license -co BAD_FREE:allow_first_field:true $*"

echo
printf "[scan]
tool = cov-mockbuild
tool-version = %s
tool-args =%s
analyzer = coverity
analyzer-version = %s
analyzer-args = %s
host = %s
mock-config = %s
time-created = %s\n" \
    "`self_version`" "$ARGS" "`cov_version`" "$COV_OPTS" "`hostname`" \
    "$MOCK_PROFILE" "`date '+%Y-%m-%d %H:%M:%S'`" \
    | tee "$INI"

# copy the SRPM to our temp
SRPM_BASE="`basename "$SRPM"`"
SRPM_DUP="$TMP/$SRPM_BASE"
cp -t "$TMP" "$SRPM" 2>&1 | tee --append "$LOG"
test -f "$SRPM_DUP" || write_status_and_die "bootstrap"

# prepare a hack to get cov-build working with up2date g++
FIXUPS="$TMP/fixups.sh"
cat > "$FIXUPS" << EOF
#!/bin/sh

# patch xmlto if installed
if test -x /usr/bin/xmlto; then
    patch /usr/bin/xmlto << XXX
--- xmlto
+++ xmlto.coverity
@@ -23,6 +23,8 @@
 BASH=bash     # GNU bash, for running the format scripts
 GETOPT=getopt # a getopt that supports --longoptions
 
+unset XML_CATALOG_FILES
+
 version () {
   echo "xmlto version 0.0.18"
 }
XXX
fi

# patch gtkdoc-mkhtml if installed
if test -x /usr/bin/gtkdoc-mkhtml; then
    patch /usr/bin/gtkdoc-mkhtml << XXX
3a4,5
> unset XML_CATALOG_FILES
> 
XXX
fi

# patch asciidoc if installed
if test -x /usr/bin/a2x; then
    patch /usr/bin/a2x << XXX
--- a2x
+++ a2x.coverity
@@ -7,6 +7,8 @@
 # under the terms of the GNU General Public License (GPL).
 #
 
+unset XML_CATALOG_FILES
+
 VERSION=1.0.0
 BASENAME=\\\$(basename "\\\$0")
 REALNAME="\\\$0"
XXX
fi

EOF

BASHRC="$TMP/bashrc"
BASHRC_TPL="/usr/share/covscan/bashrc"
if test -r "$BASHRC_TPL"; then
    cp "$BASHRC_TPL" "$BASHRC"
else
    touch "$BASHRC"
fi

# prepare a dummy patcher
if test xyes = "x$RAWBUILD"; then
    PWRAP_DIR="$TMP/pwrap"
    mkdir "$PWRAP_DIR" || write_status_and_die "bootstrap"

    if echo "$MOCK_PROFILE" | grep "rhel-5"; then
        # el5 rpm does not seem to use the %{__patch} macro for some reason
        ENV_PATH="$PWRAP_DIR:$ENV_PATH"
    fi

    PWRAP="$PWRAP_DIR/patch"
    cat > "$PWRAP" << EOF
#!/bin/sh

need_for_build(){
    while test -n "\$1"; do
        if test "x--suffix" = "x\$1"; then
            shift
            if test "x_RAWBUILD" = "x\$1"; then
                return 0
            fi
        fi

        shift
    done

    return 1
}

if need_for_build "\$@"; then
    echo "\$0: applying a patch annotated by _RAWBUILD" >&2
    /usr/bin/patch "\$@"
else
    echo "\$0: ignoring a patch not annotated by _RAWBUILD" >&2
    dd of=/dev/null status=noxfer 2>/dev/null
fi
EOF
    chmod 0755 "$PWRAP"
    RPMM="$RPMM --define '__patch $PWRAP' \
--define '_rawbuild -b _RAWBUILD' \
--define 'nofips 1' \
--define 'nopam 1' \
--define 'norunuser 1' \
--define 'noselinux 1' \
--define '_with_vanilla 1'"
fi

# prepare .tar of all the files we need inside mock chroot
TPL_BASE="bootstrap.tar"
TPL="$TMP/$TPL_BASE"
{ printf "\n>>> %s\tcreating %s\n" "`date`" "$TPL" | tee --append "$LOG"; } >&2
tar -cP -f "$TPL" "$SRPM_DUP" $PWRAP "$FIXUPS" "$BASHRC" $CPPCHECK_FILES \
    /etc/resolv.conf                            \
    /opt/coverity/VERSION.xml                   \
    /opt/coverity/config                        \
    /opt/coverity/dtd                           \
    /opt/coverity/bin/cov-*                     \
    /opt/coverity/bin/libcapture-*.so           \
    /usr/{bin,lib64}/abscc                      \
    || write_status_and_die "bootstrap" "failed to create $TPL"

# invoke mock with given parameters
mock_wrap(){
    { cmd_wrap mock-unbuffered -r "$MOCK_PROFILE" "$@"; } 2>&1 \
        | tee --append "$LOG"
}

# initialize mock chroot
mock_wrap --init \
    || write_status_and_die "bootstrap" "mock --init failed"
mock_wrap --copyin "$TPL" /tmp \
    || write_status_and_die "bootstrap" "mock --copyin failed"
rm -f "$TPL"

# prepare all we need to build the package
mock_wrap --chroot "tar -C / -xf \"/tmp/$TPL_BASE\"" \
    || write_status_and_die "bootstrap" "bootstrap failed"
mock_wrap --install "xml-common" "yum-utils" \
    || write_status_and_die "bootstrap" "mock --install failed"

if test -n "$EXTRA_DEPS"; then
    # install all dependences manually specified by the user
    mock_wrap -v --install $EXTRA_DEPS \
        || write_status_and_update_ec installdeps
fi

# yet another desperate attempt to install missing deps; without the following
# hack it was impossible to install lm_sensors-devel as a dependency
# of net-snmp-5.5-31.el6.src.rpm
eval mock_wrap -v --install "`rpm -pq "$SRPM_DUP" --requires | while read dep
    do printf " '%s'" "$dep"
done`"

# 'mock --installdeps' is not always sufficient, neither yum-builddep is
mock_wrap --installdeps "$SRPM_DUP"

# install the SRPM within the mock chroot
SPEC="`rpm -lpq "$SRPM_DUP" 2>/dev/null | grep '\.spec$'`"
mock_wrap --chroot "rpm -Uvh --nodeps \"$SRPM_DUP\"" \
    || write_status_and_die "bootstrap" "failed to install SRPM"

# make the unpacked contents of the SRPM accessible (if the maintainer did not)
mock_wrap --chroot "chmod -R +r /builddir/build"

# rebuild the SRPM to avoid RPM incompatibilities when resolving deps
mock_wrap --chroot "rpmbuild -bs --nodeps /builddir/build/SPECS/$SPEC $RPMM"

# ensure the just built SRPM has the same name as the original one
mock_wrap --chroot "/bin/bash -c 'cd /builddir/build/SRPMS && \
eval mv -v *.src.rpm $SRPM_BASE || :'"

# 'mock --installdeps' is not always sufficient, neither yum-builddep is
mock_wrap --copyout "/builddir/build/SRPMS/$SRPM_BASE" "$SRPM_DUP"
mock_wrap --installdeps "$SRPM_DUP"
mock_wrap --chroot "yum-builddep --nogpgcheck \
/builddir/build/SRPMS/$SRPM_BASE"

# TODO: branch by RHEL version
mock_wrap --chroot "sh -x $FIXUPS"

# run the %prep phase as usually (without cov-build)
mock_wrap --chroot "/bin/su mockbuild -lc \". \"$BASHRC\"; PATH=$ENV_PATH \
rpmbuild -bp --nodeps /builddir/build/SPECS/$SPEC $RPMM\"" \
    || write_status_and_update_ec "prep"

# run the %build phase through cov-build
mock_wrap --chroot "/bin/su mockbuild -lc \". \"$BASHRC\"; PATH=$ENV_PATH \
/opt/coverity/bin/cov-build --dir /builddir/cov rpmbuild -bc --nodeps \
--short-circuit /builddir/build/SPECS/$SPEC $RPMM\"" \
    || write_status_and_update_ec "build"

if test -n "$CPPCHECK"; then
mock_wrap --chroot "/bin/su mockbuild -lc \". \"$BASHRC\"; PATH=$ENV_PATH \
$CPPCHECK -j9 --inline-suppr \
--template '{file}:{line}: {severity}: {id}: {message}' \
/builddir/build/BUILD 2>/builddir/cov/cppcheck.out\"" \
    || write_status_and_update_ec "cppcheck"
fi

# get the intermediate directory out of the chroot and store it to $COV
mock_wrap --chroot "chmod -R +r /builddir/cov" \
    || write_status_and_update_ec "post"
mock_wrap --copyout /builddir/cov "$COV" \
    || write_status_and_update_ec "post"

# ###########################################################################
# we do not need the chroot anymore
if test xyes != "x$NO_CLEAN"; then
    mock_wrap --clean || write_status_and_update_ec "post"
fi

if test -e "$COV/cppcheck.out"; then
    mv "$COV/cppcheck.out" "$COV/.."
fi

# capture compiler warnings
{ cmd_wrap sh -c "csgrep --quiet --event=warning \"$LOG\" \
    | cssort > \"$BASE_DIR/compiler-warnings.err\""; }

# get the line stating count of successfully parsed compilation units
PSTAT="`grep 'C/C++ compilation units (.*%) are ready for analysis$' \
    "$COV/build-log.txt"`"

# parse the absolute/relative count of successfully parsed compilation units
U_COUNT="`printf '%s\n' "$PSTAT" | sed -r 's|^[^0-9]*([0-9]+) C/C\+\+ .*$|\1|'`"
U_RATIO="`printf '%s\n' "$PSTAT" | sed -r 's|^.* \(([0-9]+)%\) .*$|\1|'`"

# assume zero successfully parsed compilation units unless proven otherwise
test 0 -lt "$U_COUNT" 2>/dev/null || U_COUNT=0
test 0 -lt "$U_RATIO" 2>/dev/null || U_RATIO=0

# write the parsing statistics to .ini
printf "compilation-unit-count = %d\ncompilation-unit-ratio = %d\n" \
    "$U_COUNT" "$U_RATIO" | tee --append "$INI"

PROJ_NAME="$BASE"
test xyes = "x$RAWBUILD" && PROJ_NAME+="-rawbuild"
printf "project-name = %s\n" "$PROJ_NAME" | tee --append "$INI"

# check whether it makes sense to wait for the license to become available
if test -f "$COV"/c/emit/*/emit-db.write-lock; then

    # run the analysis
    cmd_wrap cov-analyze --dir "$COV" $COV_OPTS 2>&1        \
        | tee --append "$LOG"                               \
        || write_status_and_update_ec "analyze"

    # store the list of defects to $ERR
    { cmd_wrap cov-dump-err "$COV" > "$ERR"; } 2>&1         \
        | tee --append "$LOG"                               \
        || write_status_and_update_ec "analyze"

    if test xyes = "x$COMMIT_TO_IM"; then
        # initialize variables for IM configuration
        test -n "$COMMIT_TO_IM_OPTS" && load_im_opts "$COMMIT_TO_IM_OPTS"
        . /usr/share/covscan/cov-default-connect.sh

        cmd_wrap cov-commit-project "$COV" "$PROJ_NAME" 2>&1        \
            | tee --append "$LOG"                                   \
                || write_status_and_update_ec "commit"

        PROJ_ID="`cov-getprojkey -p "$PROJ_NAME"`"
        if test 0 -lt "$PROJ_ID"; then
            printf "project-id = %d\n" "$PROJ_ID" | tee --append "$INI"
            { cmd_wrap cov-query-defects "$PROJ_NAME"               \
                | perl -i -p -e 's/\/builddir\/build\/BUILD\///'    \
                > "$MAP"; } 2>&1 | tee --append "$LOG"              \
                || write_status_and_update_ec "commit"

            CSHTML_OPTS="--defect-url-template ${COV_IM_PUB_URL}/\
sourcebrowser.htm?projectId=%s#mergedDefectId=%s"
        fi
    fi
else
    # just make sure we return non-zero exit code if we analyzed nothing
    touch "$ERR"
    update_ec 1 "analyze"
fi

printf "time-finished = %s\n" "`date '+%Y-%m-%d %H:%M:%S'`" >> "$INI"

# write the 'lines-processed' field to .ini
LSTAT="`grep '^Total LoC input to cov-analyze' "$LOG"`"
L_CNT="`printf '%s\n' "$LSTAT" | sed -r 's|^[^0-9]*||'`"
printf "lines-processed = %d\n" "$L_CNT" | tee --append "$INI"

# write the 'time-elapsed-analysis' field to to .ini
TSTAT="`grep '^Time taken by Coverity analysis' "$LOG"`"
ATIME="`printf '%s\n' "$TSTAT" | sed -r 's|^[^0-9]*||'`"
printf "time-elapsed-analysis = %s\n" "$ATIME" | tee --append "$INI"

# do we have a readable .map file?
if test -r "$MAP"; then
    MAP="--mapfile $MAP"
else
    MAP=
fi

{ cmd_wrap cslinker --cwelist /usr/share/covscan/cwe-map.csv --inifile "$INI" \
    $MAP "$ERR" > "$JS"; } 2>&1 | tee --append "$LOG"

# regenerate .err from .js to get the CWE numbers in place and drop trace events
{ cmd_wrap csgrep --prune-events=1 "$JS" > "$ERR"; } 2>&1 | tee --append "$LOG"

# generate .html from .js without trace events
{ cmd_wrap sh -c "csgrep --prune-events=1 --mode=json \"$JS\" \
    | cshtml $CSHTML_OPTS - > \"$HTML\""; } 2>&1 \
    | tee --append "$LOG"

mv -v "$COV/build-log.txt" "$COV/.." 2>&1 | tee --append "$LOG"

cmd_wrap cov-format-errors --dir "$COV" 2>&1 | tee --append "$LOG"

mv -v "$COV/c/output/errors" "$COV/../cov-html/" 2>&1 | tee --append "$LOG"

if test xyes != "x$KEEP_COV"; then
    rm -rf "$COV"
fi

printf "\n<<< %s has finished, exit code is %s\n" "$SELF" "${EC:=0}"  \
    | tee --append "$LOG"

exit $EC
