#!/bin/bash

# Copyright (C) 2011 Red Hat, Inc.
#
# This file is part of csdiff.
#
# csdiff is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# csdiff is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with csdiff.  If not, see <http://www.gnu.org/licenses/>.

SELF="$0"
ARGS="$@"

set -o pipefail

export LC_ALL=C

test -z "$TMPDIR" && TMPDIR="/tmp"

OPTS="fit"

usage(){
    cat << EOF
usage: $SELF [-$OPTS] MOCK_PROFILE my-package.src.rpm [COV_OPTS]

  -f  Overwrite the file with results if it already exists.  By default, this
      would fail.

  -i  Keep Coverity intermediate directory for further processing.  By default,
      only build-log.txt is kept.

  -t  Do not compress the resulting tarball.  Used to save time in case it is
      going to be extracted right away.

  MOCK_PROFILE  Only name of the mock profile, without the path and without
                the .cfg suffix.

  COV_OPTS      Options passed to cov-analyze.
EOF
    exit 1
}

die(){
    if test -n "$1"; then
        echo "$SELF: error: $1" >&2
    else
        echo "$SELF: generic error" >&2
    fi
    exit 1
}

while getopts $OPTS opt; do
    case "$opt" in
        f)  OVERWRITE_RESULTS=yes
            ;;

        i)
            COV_MOCKBUILD_OPTS=-i
            ;;

        t)  TAR_ONLY=yes
            ;;

        *)
            usage
            ;;
    esac
done
shift $(($OPTIND - 1))

# the first argument should be mock profile
MOCK_PROFILE="$1"
MOCK_CFG="/etc/mock/$MOCK_PROFILE.cfg"
test -f "$MOCK_CFG" || usage

# the second operand is the SRPM to build/analyze
SRPM="`readlink -f "$2"`"
test -n "$SRPM" || usage
test -r "$SRPM" || die "failed to open $SRPM"
rpm -pq "$SRPM" || die "failed to open an RPM package: $SRPM"

BASE="`basename "$SRPM" .src.rpm`"
JS="$BASE.js"
RESULTS="$BASE.tar"

if test xyes = "x$TAR_ONLY"; then
    TGZ="$RESULTS"
else
    TGZ="$RESULTS.xz"
    TAR_OPTS=-J
fi

if test xyes = "x$OVERWRITE_RESULTS"; then
    rm -fv "$TGZ"
fi

test -e "$TGZ" && die "'$TGZ' already exists"

# extra options for cov-analyze
shift
shift
COV_OPTS="$*"

# create the directory for results in $TMPDIR
TMP="`mktemp -d $TMPDIR/cov-diffbuild.XXXXXX`"
RESULTS_DIR="$TMP/$BASE"
INI="$RESULTS_DIR/$BASE.ini"
mkdir -p "$RESULTS_DIR/run0" "$RESULTS_DIR/run1"
test -d "$RESULTS_DIR" || die "mktemp failed"

trap "echo --- $SELF: removing $TMP... 2>&1; rm -rf '$TMP'" EXIT

# FIXME: we should replace 2s by wait() somehow
trap "echo --- $SELF: killing children... 2>&1; kill -SIGINT 0; sleep 2" \
    SIGINT SIGTERM SIGHUP

cmd_wrap() {
    printf "\n>>> %s\t%s\n" "`date`" "$*" >&2
    "$@" < /dev/null
    last_ec=$?

    if test 128 -le "$last_ec" -a "$last_ec" -lt 192; then
        echo "<<< $SELF: child signalled to die by $(($last_ec - 128))" >&2
        exit $last_ec
    fi

    return $last_ec
}

unpack_results(){
    cmd_wrap tar xf "$RESULTS" && rm -f "$RESULTS"
}

# FIXME: copy/pasted from cov-mockbuild
cov_version() {
    cov-analyze --ident \
        | perl -i -p -e 's/\n/\\n/' \
        | perl -i -p -e 's/(\\n)*$//'
}

self_version() {
    rpm -q cov-mockbuild 2>&1
}

# FIXME: copy/pasted from cov-mockbuild
echo
printf "[scan]
tool = cov-diffbuild
tool-version = %s
tool-args = %s
analyzer = coverity
analyzer-version = %s
analyzer-args = %s
host = %s
config = %s
started = %s\n" \
    "`self_version`" "$ARGS" "`cov_version`" "$COV_OPTS" "`hostname`" \
    "$MOCK_PROFILE" "`date '+%Y-%m-%d %H:%M:%S'`" \
    | tee "$INI"

pushd "$TMP" >/dev/null || die

# build the package without patches
cmd_wrap cov-mockbuild $COV_MOCKBUILD_OPTS -xt $MOCK_PROFILE "$SRPM" \
    $COV_OPTS || touch "$RESULTS_DIR/run0.FAILED"
unpack_results

# build the package with patches
cmd_wrap cov-mockbuild $COV_MOCKBUILD_OPTS -t $MOCK_PROFILE "$SRPM"  \
    $COV_OPTS || touch "$RESULTS_DIR/run1.FAILED"
unpack_results

# compare both defect lists
cmd_wrap csdiff "$RESULTS_DIR/run0/$JS" "$RESULTS_DIR/run1/$JS"       \
    | tee "$RESULTS_DIR/defects-in-patches.js"                        \
    || touch "$RESULTS_DIR/diff.FAILED"

printf "finished = %s\n" "`date '+%Y-%m-%d %H:%M:%S'`" >> "$INI"

# finally write the results
popd >/dev/null || die
cmd_wrap tar $TAR_OPTS -cvf "$TGZ" -C "$TMP" "$BASE"
