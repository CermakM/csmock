#!/bin/bash
SELF="$0"

set -o pipefail

test -z "$TMPDIR" && TMPDIR="/tmp"

OPTS="fi"

usage(){
    echo "Usage: $SELF [-$OPTS] MOCK_PROFILE my-package.src.rpm [COV_OPTS]"
    exit 1
}

die(){
    if test -n "$1"; then
        echo "$SELF: error: $1" >&2
    else
        echo "$SELF: generic error" >&2
    fi
    exit 1
}

while getopts $OPTS opt; do
    case "$opt" in
        f)  OVERWRITE_RESULTS=yes
            ;;

        i)
            KEEP_COV=yes
            ;;

        *)
            usage
            ;;
    esac
done
shift $(($OPTIND - 1))

# the first argument should be mock profile
MOCK_PROFILE="$1"
MOCK_CFG="/etc/mock/$MOCK_PROFILE.cfg"
test -f "$MOCK_CFG" || usage

# the second operand is the SRPM to build/analyze
SRPM="`readlink -f "$2"`"
test -n "$SRPM" || usage
test -r "$SRPM" || die "failed to open $SRPM"
rpm -pq "$SRPM" || die "failed to open an RPM package: $SRPM"

# look for cov-mockbuild
TOP="`dirname "$SELF"`"
COV_MOCKBUILD="`readlink -f "$TOP/cov-mockbuild"`"
test -x "$COV_MOCKBUILD" || die "cov-mockbuild not found"

BASE="`basename "$SRPM" .src.rpm`"
COV="$BASE.cov"
LOG="$BASE.log"
OUT="$BASE.out"
ERR="$BASE.err"
TGZ="$BASE.tar.xz"

if test xyes = "x$OVERWRITE_RESULTS"; then
    rm -fv "$TGZ"
fi

test -e "$TGZ" && die "'$TGZ' already exists"

# extra options for cov-analyze
shift
shift
COV_OPTS="$*"

# create the directory for results in $TMPDIR
TMP="`mktemp -d $TMPDIR/cov-diffbuild.XXXXXX`"
RESULTS_DIR="$TMP/$BASE"
mkdir -p "$RESULTS_DIR/run0" "$RESULTS_DIR/run1"
test -d "$RESULTS_DIR" || die "mktemp failed"

trap "echo --- $SELF: removing $TMP... 2>&1; rm -rf '$TMP'" EXIT

# FIXME: we should replace 2s by wait() somehow
trap "echo --- $SELF: killing children... 2>&1; kill -SIGINT 0; sleep 2" \
    SIGINT SIGTERM SIGHUP

export KEEP_COV

write_logs_to(){
    mv "$OUT" "$ERR" "$LOG" "$1/"

    if test xyes = "x$KEEP_COV"; then
        mv "$COV" "$1/"
    else
        mv "$COV/build-log.txt" "$1/"
        rm -rf "$COV"
    fi
}

cmd_wrap() {
    printf "\n>>> %s\t%s\n" "`date`" "$*" >&2
    "$@" < /dev/null
    last_ec=$?

    if test 128 -le "$last_ec" -a "$last_ec" -lt 192; then
        echo "<<< $SELF: child signalled to die by $(($last_ec - 128))" >&2
        exit $last_ec
    fi

    return $last_ec
}

pushd "$RESULTS_DIR" >/dev/null || die

# build the package without patches
cmd_wrap "$COV_MOCKBUILD" -x $MOCK_PROFILE "$SRPM" $COV_OPTS \
    || touch run0.FAILED
write_logs_to "run0" 2>/dev/null

# build the package with patches
cmd_wrap "$COV_MOCKBUILD" $MOCK_PROFILE "$SRPM" $COV_OPTS \
    || touch run1.FAILED
write_logs_to "run1" 2>/dev/null

# compare both defect lists
cmd_wrap csdiff "run0/$ERR" "run1/$ERR"     \
    | tee "./defects-in-patches.err"        \
    || touch ./diff.FAILED

# finally write the results
popd >/dev/null || die
cmd_wrap tar -Jcvf "$TGZ" -C "$TMP" "$BASE"
